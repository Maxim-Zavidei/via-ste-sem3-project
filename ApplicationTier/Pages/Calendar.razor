@page "/calendar"
@using MudBlazor.Extensions
@using System.Globalization

<MudToolBar>
    <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" Class="mr-5"/>
    
    <MudTooltip Text="Add Event" Color="Color.Secondary" Placement="Placement.Bottom">
        <MudIconButton Icon="@Icons.Material.Outlined.Add" OnClick="@DisplayEvent"/>
    </MudTooltip>
    
    <MudIconButton Icon="@Icons.Material.Outlined.Edit"/>
    <MudIconButton Icon="@Icons.Material.Outlined.Remove" Color="Color.Inherit" OnClick="@CloseEvent"/>
    <MudIconButton Icon="@Icons.Material.Outlined.Settings" Color="Color.Inherit"/>
    <MudContainer>
        <MudButton Variant="Variant.Text" Size="Size.Small" Class="ma-2" @onclick="() => SwitchMonth(false)">&lt;</MudButton>
        <MudButton Variant="Variant.Text" Size="Size.Medium" Class="ma-2">@MonthNames[DisplayedMonth]</MudButton>
        <MudButton Variant="Variant.Text" Size="Size.Small" Class="ma-2" @onclick="() => SwitchMonth(true)">&gt;</MudButton>
    </MudContainer>
    <MudSpacer/>
    <MudIconButton Icon="@Icons.Material.Outlined.Notifications"/>
    <MudIconButton Icon="@Icons.Material.Outlined.PushPin"/>
    <MudIconButton Icon="@Icons.Material.Outlined.PeopleAlt"/>
    <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit"/>
</MudToolBar>
@if (showAddEvent)
    {
        <Event/>
    }
<MudGrid Justify="Justify.Center">

    <table>
        <thead>
        <tr>
            @foreach (var day in WeekDays) {
                <th>
                    <MudPaper Class="px-16 py-2 ma-2" Elevation="3">@day</MudPaper>
                </th>
            }
        </tr>
        </thead>
        <tbody>
        @for (var i = 0; i < Days.GetLength(0); i++) {
            <tr>
                @for (var j = 0; j < 7; j++) {
                    <td>
                        @{
                            var i1 = i;
                            var j1 = j;
                        }
                        @if (@Days[i1, j1] == 0) {
                            <MudPaper Class="pa-16 ma-2" Elevation="3" Style="background-color: grey">
                                
                            </MudPaper>
                        }
                        else {
                            <MudPaper  Class="pa-16 ma-2  " Elevation="3"  >
                                <MudFab Color="Color.Secondary" Size="Size.Small" IconSize="Size.Small" Class="ma-2  " Label="@Days[i1, j1].ToString()" />
                            </MudPaper>
                        }
                    </td>
                }
            </tr>
        }
        </tbody>
    </table>
</MudGrid>

@code {
    private static readonly string[] WeekDays = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
    private static readonly string[] MonthNames = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};

    private DateTime SelectedDate = DateTime.Now;
    private int DisplayedMonth = DateTime.Now.Month - 1;
    private int DisplayedYear = DateTime.Now.Year;
    
    private int[,] Days;

    private void UpdateCalendarView() {
        var DisplayedDate = new DateTime(DisplayedYear, DisplayedMonth + 1, 1);
        var StartDayOfSelectedMonth = (int) DisplayedDate.StartOfMonth(CultureInfo.InvariantCulture).DayOfWeek;
        StartDayOfSelectedMonth += StartDayOfSelectedMonth == 0 ? 7 : 0;
        var EndDayOfSelectedMonth = (int) DisplayedDate.EndOfMonth(CultureInfo.InvariantCulture).DayOfWeek;
        EndDayOfSelectedMonth += EndDayOfSelectedMonth == 0 ? 7 : 0;
        var WeeksToDisplay = (StartDayOfSelectedMonth + DateTime.DaysInMonth(DisplayedDate.Year, DisplayedDate.Month) + (7 - EndDayOfSelectedMonth) - 1) / 7;
        var DayCount = 1;
        Days = new int[WeeksToDisplay, 7];

        for (var i = 0; i < StartDayOfSelectedMonth; i++) Days[0, i] = 0;
        for (var i = StartDayOfSelectedMonth - 1; i < 7; i++) Days[0, i] = DayCount++;
        for (var j = 1; j < WeeksToDisplay - 1; j++) {
            for (var i = 0; i < 7; i++) Days[j, i] = DayCount++;
        }
        for (var i = 0; i < EndDayOfSelectedMonth; i++) Days[Days.GetLength(0) - 1, i] = DayCount++;
        for (var i = EndDayOfSelectedMonth; i < 7; i++) Days[Days.GetLength(0) - 1, i] = 0;
    }

    private void SwitchMonth(bool GoForward) {
        DisplayedMonth += GoForward ? 1 : -1;
        if (DisplayedMonth is -1 or 12) {
            DisplayedYear += DisplayedMonth % 11;
            DisplayedMonth = (DisplayedMonth % 12 + 12) % 12;
        }
        UpdateCalendarView();
    }
    
    protected override async Task OnInitializedAsync() {
        UpdateCalendarView();
    }
    private bool showAddEvent { get; set;}

    private void DisplayEvent()
    {
        showAddEvent = true;
    }
    private void CloseEvent()
    {
        showAddEvent = true;
    }
}
