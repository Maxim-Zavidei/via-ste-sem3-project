@page "/friends"
@using ApplicationTier.Models
@using ApplicationTier.Data
@using Authentication
@inject IUserService _userData
@inject AuthenticationStateProvider AuthenticationStateProvider
<h3>List of Users that share their calendar.</h3>
<AuthorizeView>
    <Authorized>
@if (allUsers == null)
{
    <p>Loading...</p>
}
else if(!allUsers.Any())
{
    <p>No items exist.</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Username</th>
            <th>Email</th>
            <th>Calendar</th>
            <th>Delete</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var user in allUsers)
        {
            <tr>
                <td>@user.Username</td>
                <td>@user.Email</td>
                <td><MudIconButton Href="/calendar" Icon="@Icons.Filled.CalendarToday"></MudIconButton></td>
                <td><MudIconButton Icon="@Icons.Filled.Delete"></MudIconButton></td>
            </tr>
        }
        </tbody>
    </table>
}
 </Authorized>
 <NotAuthorized>
     <h1>Please Login: <a href="/login">Log in</a></h1>
 </NotAuthorized>
</AuthorizeView>

@code {
    private IList<User> allUsers;
    protected override async Task OnInitializedAsync()
    {
        try{
        allUsers = await _userData.GetAllSharing();
        } catch(Exception e)
        {

        }
        //allUsers.Remove(((CustomAuthenticationStateProvider) AuthenticationStateProvider).GetCachedUser());
        /*
                <td><button class="btn btn-light"><i class="oi oi-calendar"/></button></td>
                <td><button class="btn btn-light"><i class="oi oi-trash" style="color: red"/></button></td>*/
    }

}