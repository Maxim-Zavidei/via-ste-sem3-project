@page "/event"
@using InputType = MudBlazor.InputType
@using System.ComponentModel.DataAnnotations
@using ApplicationTier.Models
@using Authentication

<MudGrid Justify="Justify.Center">
    <MudItem Class="my-2 ">
        @* Elevation="3" *@
        <MudPaper Class="d-flex align-center justify-center px-8 py-2">


            <EditForm Model="@EventFormModel" OnValidSubmit="OnValidEventFormSubmit">
                <DataAnnotationsValidator/>
                <MudText Typo="Typo.h4" Align="Align.Center" Class="my-8 mx-5">Add an Event</MudText>
                <MudTextField Label="Title" Class="mt-3" @bind-Value="EventFormModel.Title" For="@(() => EventFormModel.Title)" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Title"/>
                <MudTextField Label="Description" Class="mt-3" @bind-Value="EventFormModel.Description" For="@(() => EventFormModel.Description)" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.ShortText"/>
                <MudItem Class="d-flex justify-space-between  ">

                    <MudDatePicker Label="Start date" class="mr-16" @bind-Date="EventFormModel.StartDate" DateFormat="dd/MM/yyyy"/>

                    <MudTimePicker Label="Start time" @bind-Time="EventFormModel.StartTime" TimeEditMode="TimeEditMode.Normal"/>

                </MudItem>
                <MudItem Class="d-flex justify-space-between ">

                    <MudDatePicker Label="End date" class="mr-16" @bind-Date="EventFormModel.EndDate" DateFormat="dd/MM/yyyy"/>

                    <MudTimePicker Label="End time" @bind-Time="EventFormModel.EndTime" TimeEditMode="TimeEditMode.Normal"/>

                </MudItem>
                <MudItem Class="d-flex justify-space-between ">
                    <MudTextField Label="Street name" Class="mt-3 mr-16" @bind-Value="EventFormModel.StreetName" For="@(() => EventFormModel.StreetName)" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Apartment"/>
                    <MudTextField Label="Street Number" Class="mt-3" @bind-Value="EventFormModel.Number" For="@(() => EventFormModel.Number)" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Bathtub" AdornmentColor="Color.Info"/>
                </MudItem>
                <MudItem Class="d-flex justify-space-between ">
                    <MudTextField Label="City" Class="mt-3 " @bind-Value="EventFormModel.City" For="@(() => EventFormModel.City)" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.LocationCity"/>
                    <MudTextField Label="Country" Class="mt-3 ml-16" @bind-Value="EventFormModel.Country" For="@(() => EventFormModel.Country)" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Flag"/>
                </MudItem>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Class="py-2 mt-4">Add</MudButton>

                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Error" FullWidth="true" Class="py-2 mt-4">Cancel</MudButton>

                <MudText Typo="Typo.body2" Align="Align.Center" Class="my-4" FullWidth="true" Color="Color.Error">@ErrorMessage</MudText>

            </EditForm>

        </MudPaper>
    </MudItem>
</MudGrid>


@code {






    // Class that contains the input data of the event form.
    public class EventForm
    {
        [Required]
        [StringLength(50, ErrorMessage = "Title name must be at least 2 characters long.", MinimumLength = 2)]
        public string Title { get; set; }

        [Required]
        [StringLength(50, ErrorMessage = "Description must be at least 2 characters long.", MinimumLength = 2)]
        public string Description { get; set; }

        [Required]
        public DateTime? StartDate { get; set; }

        [Required]
        public DateTime? EndDate { get; set; }

        [Required]
        public TimeSpan? StartTime { get; set; }

        [Required]
        public TimeSpan? EndTime { get; set; }


        [Required]
        [StringLength(50, ErrorMessage = "Street name must be at least 2 characters long.", MinimumLength = 2)]
        public string StreetName { get; set; }

        [Required]
        public string Number { get; set; }

        [Required]
        [StringLength(50, ErrorMessage = "City  must be at least 2 characters long.", MinimumLength = 2)]
        public string City { get; set; }

        [Required]
        [StringLength(50, ErrorMessage = "City  must be at least 2 characters long.", MinimumLength = 2)]
        public string Country { get; set; }
    }

    private readonly EventForm EventFormModel = new();
    private string ErrorMessage;

    private async Task OnValidEventFormSubmit(EditContext context)
    {
        Console.WriteLine("Adding event");
        ErrorMessage = "";
        try
        {
        }
        catch (Exception e)
        {
            ErrorMessage = ErrorMessage = e.Message;
        }
    }

}