@using Authentication
@using ApplicationTier.Models
@using ApplicationTier.Data
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserService UserService
<MudNavMenu>

    <MudTextField Typo="Typo.h6" Class="px-4" ReadOnly="true" @bind-Value="FullName"></MudTextField>
    <MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">Control Panel</MudText>

    <MudDivider Class="my-2" />

    <MudNavLink Href=@link Icon="@Icons.Filled.CalendarToday" onprogress="GetLink">Calendar</MudNavLink>
    <MudNavLink Href="/friends" Icon="@Icons.Filled.People">Friends</MudNavLink>
    <MudNavGroup Title="Settings" Icon="@Icons.Filled.Settings" Expanded="false">
        <MudNavLink Href="/sharing" Icon="@Icons.Filled.Share" IconColor="Color.Success">Sharing</MudNavLink>
        <MudNavLink Href="/security" Icon="@Icons.Filled.Security" IconColor="Color.Info">Security</MudNavLink>
    </MudNavGroup>
    <MudNavLink Href="/about" Icon="@Icons.Filled.Article">About</MudNavLink>
</MudNavMenu>


@code {
    public String FullName { get; set; } = "Anonymous";
    public static String link { get; set; } = "/calendar/";

    protected override async Task OnInitializedAsync()
    {
        ((CustomAuthenticationStateProvider)AuthenticationStateProvider).handler += ChangeName;
        UserService.GetDelegates().handleId += LoggedIn;
    }
    public void ChangeName(String name)
    {
        FullName = name;
        InvokeAsync(StateHasChanged);
        System.Console.WriteLine(FullName);
    }

    public  void LoggedIn(int id)
    {
        if(id == 0) link = "/calendar/";
        else link += id;
        InvokeAsync(StateHasChanged);
        System.Console.WriteLine(link);
    }


    public void ChangedState()
    {
        InvokeAsync(StateHasChanged);
    }

}